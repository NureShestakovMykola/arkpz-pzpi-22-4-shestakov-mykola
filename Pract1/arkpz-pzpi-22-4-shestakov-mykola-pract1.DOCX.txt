Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 








ЗВІТ
 до практичної роботи номер 1 з дисципліни
 "Аналіз та рефакторинг коду"
 на тему: "Правила оформлення програмного коду" 








 














Виконав ст. гр ПЗПІ-22-4
Шестаков Микола Саркісович 




Перевірив 
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 












Харків 2024
________________
МЕТА
Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду на мові програмування JavaScript, навчитися застосовувати ці рекомендації на практиці, аналізувати існуючий код та виконувати його рефакторинг для підвищення якості, читабельності та підтримуваності.


ВСТУП
        JavaScript — це потужна і універсальна мова програмування, яка лежить в основі більшості сучасних веб-додатків. Завдяки своїй гнучкості, вона використовується як для створення інтерактивного інтерфейсу користувача, так і для серверної логіки, мобільних додатків тощо. Її популярність зумовлена простотою входу для початківців і широкими можливостями для професійних розробників. 
Правильне оформлення коду — це не просто данина моді чи бажання зробити код "гарним". Це необхідність, яка впливає на якість роботи проєкту загалом. Код, який відповідає стандартам, чистий і добре структурований, дозволяє розробникам уникнути хаосу, зменшує кількість помилок і забезпечує стабільність роботи програми. 
Дотримання стандартів оформлення JavaScript-коду сприяє покращенню читабельності та продуктивності. Осмислені назви змінних і функцій допомагають уникнути плутанини, а чітка структура коду дозволяє швидко орієнтуватися в логіці програми. Крім того, правила оформлення значно знижують ризик помилок і збоїв, що критично важливо для складних систем. Гарно написаний код також економить час на його підтримку, дає змогу легко вносити зміни і швидко розширювати функціонал. 
Слід зазначити, що представлені рекомендації охоплюють лише частину основних правил написання якісного коду на JavaScript. Для глибшого ознайомлення з темою рекомендується звернутися до надійних джерел, наприклад, [1] [2].
________________
РЕКОМЕНДАЦІЇ ДЛЯ НАПИСАННЯ КОДУ


        Рекомендація: Використовуйте осмислені та зрозумілі назви змінних, функцій та класів.
Опис: Правильне іменування допомагає іншим розробникам легко зрозуміти призначення коду. Уникайте використання абревіатур і коротких імен без значення.
Приклад:
// Поганий приклад
function x(a) {
    return a * 2;
}


// Гарний приклад
function multiplyByTwo(number) {
    return number * 2;
}


Рекомендація: Використовуйте дієслова у назвах функцій.
Опис: Назва функції має чітко відображати дію, яку вона виконує. Це спрощує розуміння логіки програми й забезпечує легшу навігацію по коду. Використання дієслів дозволяє описати функціональність без зайвих пояснень.
Приклад:
// Поганий приклад
function data() {
    return true;
}


// Гарний приклад
function fetchData() {
    return true;
}


Рекомендація: Використовуйте формат CamelCase для змінних та PascalCase для класів.
Опис: Дотримання стандартів форматування імен допомагає швидко зрозуміти, що саме означає змінна або клас. CamelCase використовується для назв змінних і функцій (camelCaseExample), тоді як PascalCase призначений для класів (PascalCaseExample). Це спрощує читання коду і дозволяє одразу відрізнити змінну від класу, навіть не звертаючись до контексту.
Приклад:
// Поганий приклад
const user_data = {};
class userprofile {}


// Гарний приклад
const userData = {};
class UserProfile {}


Рекомендація: Уникайте однобуквених імен змінних, крім лічильників циклів.
Опис: Імена змінних повинні бути осмисленими та пояснювати їх призначення. Однобуквені імена, як правило, заплутують і вимагають додаткового аналізу, особливо якщо вони використовуються поза межами коротких блоків, як-от цикли. Виняток становлять лічильники циклів (i, j, k), які широко використовуються і зрозумілі за контекстом.
Приклад:
// Поганий приклад
let x = 10;


// Гарний приклад
let studentCount = 10;


Рекомендація: Використовуйте однаковий стиль відступів (2 або 4 пробіли).
Опис: Відступи є ключовим елементом читабельності коду. Незалежно від того, чи оберете ви 2 або 4 пробіли, важливо дотримуватись єдиного стандарту в усьому проєкті. Це не лише підвищує зрозумілість структури коду, але й робить його більш організованим та легшим для роботи всієї команди.
Приклад:
// Поганий приклад
if (x > 10){
console.log('More than 10');
}


// Гарний приклад
if (x > 10) {
    console.log('More than 10');
}


Рекомендація: Завжди використовуйте дужки {} навіть для однорядкових операторів.
Опис: Використання фігурних дужок навіть для простих умов чи циклів захищає код від логічних помилок. Без дужок складно додати нові інструкції, що може призвести до неочікуваних результатів. Це правило спрощує рефакторинг і гарантує правильне виконання коду незалежно від складності умов.
Приклад:
// Поганий приклад
if (x > 10) 
    console.log('More than 10');


// Гарний приклад
if (x > 10) {
    console.log('More than 10');
}


Рекомендація: Розділяйте великий код на окремі функції.
Опис: Поділ великих функцій на дрібні підвищує зрозумілість коду та полегшує тестування й налагодження. Кожна функція повинна виконувати одну чітку дію, що дозволяє легко повторно використовувати її у різних частинах програми.
Приклад:
// Поганий приклад
function processOrder(order) {
    if (!order) return;
    if (!order.items.length) return;
    if (order.status !== 'completed') return;
    console.log('Processing order...');
}


// Гарний приклад
function validateOrder(order) {
    if (!order) throw new Error('Order is missing');
    if (!order.items.length) throw new Error('Order has no items');
    if (order.status !== 'completed') throw new Error('Order is not completed');
}


function processOrder(order) {
    validateOrder(order);
    console.log('Processing order...');
}


Рекомендація: Використовуйте деструктуризацію для об'єктів та масивів.
Опис: Деструктуризація дозволяє скоротити код, підвищуючи його читабельність і зменшуючи кількість повторень. Це полегшує доступ до властивостей об'єктів або елементів масивів, а також зменшує ризик помилок, пов'язаних із неправильним доступом до значень.
Приклад:
// Поганий приклад
const user = { name: 'John', age: 30 };
const name = user.name;
const age = user.age;


// Гарний приклад
const user = { name: 'John', age: 30 };
const { name, age } = user;


Рекомендація: Використовуйте try...catch для обробки потенційних помилок.
Опис: Обробка винятків із використанням try...catch дозволяє забезпечити стабільну роботу програми, навіть якщо трапляються помилки. Це забезпечує безпеку програми та запобігає її аварійному завершенню.
Приклад:
// Поганий приклад
const data = JSON.parse(userInput);


// Гарний приклад
try {
    const data = JSON.parse(userInput);
} catch (error) {
    console.error('Invalid JSON:', error);
}


Рекомендація: Використовуйте глобальні обробники помилок.
Опис: Глобальні обробники дозволяють відстежувати та логувати всі помилки в додатку.
Приклад:
// Гарний приклад
window.addEventListener('error', function(event) {
    console.error('Global error:', event.message);
});


Рекомендація: Уникайте дублювання коду (DRY).
Опис: Принцип DRY (Don't Repeat Yourself) наголошує на уникненні дублювання коду. Якщо одна і та сама логіка використовується у кількох місцях, її слід винести у функцію. Це зменшує обсяг коду, знижує ймовірність помилок і спрощує підтримку, оскільки зміни потрібно вносити лише в одному місці.
Приклад:
// Поганий приклад
function square(x) {
    return x * x;
}


function cube(x) {
    return x * x * x;
}


// Гарний приклад
function power(x, n) {
    return Math.pow(x, n);
}


Рекомендація: Уникайте вкладених умов, використовуйте ранній вихід (early return).
Опис: Вкладені конструкції if можуть значно ускладнити читання та розуміння коду. Ранній вихід із функції (early return) дозволяє уникнути зайвої вкладеності, зменшити кількість рівнів логіки та зробити код більш лаконічним і зрозумілим. Використання раннього виходу також спрощує підтримку та внесення змін до програми..
Приклад:
// Поганий приклад
if (data) {
    if (data.valid) {
        console.log('Valid data');
    }
}


// Гарний приклад
if (!data) return;
if (!data.valid) return;
console.log('Valid data');


Рекомендація: Дробіть великі функції на дрібні підфункції.
Опис: Великі функції, які виконують кілька завдань одночасно, важко зрозуміти, протестувати та налагоджувати. Розбивання великої функції на менші підфункції, кожна з яких виконує одну конкретну задачу, покращує читабельність, полегшує повторне використання коду та спрощує підтримку.
Приклад:
// Поганий приклад
function processOrder(order) {
    if (!order) return;
    if (!order.items.length) return;
    console.log('Processing order...');
}


// Гарний приклад
function validateOrder(order) {
    if (!order) throw new Error('Order is missing');
    if (!order.items.length) throw new Error('Order has no items');
}


function processOrder(order) {
    validateOrder(order);
    console.log('Processing order...');
}


Рекомендація: Використовуйте іменовані константи замість "магічних чисел".
Опис: "Магічні числа" — це числа, які використовуються у коді без пояснення їх значення. Вони ускладнюють розуміння програми і створюють ризик помилок при внесенні змін. Замінюючи магічні числа іменованими константами, ви робите код зрозумілішим і легшим у підтримці.
Приклад:
// Поганий приклад
if (user.age >= 18) {
    console.log('User is an adult');
}


// Гарний приклад
const ADULT_AGE = 18;
if (user.age >= ADULT_AGE) {
    console.log('User is an adult');
}


Рекомендація: Видаляйте "мертвий код" (невикористовувані змінні, функції або частини коду).
Опис: Невикористовуваний код, або "мертвий код", ускладнює програму, знижує її читабельність і збільшує ризик помилок. Видаляючи такий код, ви робите програму більш зрозумілою, ефективною та легкою для підтримки.
Приклад:
// Поганий приклад
function fetchData() {
    // Старий код, який більше не потрібний
    // const url = 'https://example.com';
    console.log('Data fetched');
}


// Гарний приклад
function fetchData() {
    console.log('Data fetched');
}


Рекомендація: Використовуйте сучасний синтаксис JavaScript (ES6+).
Опис: Нові можливості JavaScript, такі як let, const, стрілочні функції, деструктуризація, дозволяють писати більш зрозумілий і короткий код. Вони також допомагають уникати поширених помилок, наприклад, неконтрольованого переприсвоєння змінних.
Приклад:
// Поганий приклад
var x = 10;
function sum(a, b) {
    return a + b;
}


// Гарний приклад
const x = 10;
const sum = (a, b) => a + b;


Рекомендація: Уникайте змінюваних об'єктів, використовуйте незмінні об'єкти (immutable objects).
Опис: Зміна об'єктів може викликати побічні ефекти, які важко відстежити. Натомість створення нових об'єктів із використанням незмінних даних підвищує стабільність програми та спрощує її налагодження.
Приклад:
// Поганий приклад
const user = { name: 'John', age: 30 };
user.age = 31; // Зміна об'єкта


// Гарний приклад
const user = { name: 'John', age: 30 };
const updatedUser = { ...user, age: 31 }; 


Рекомендація: Використовуйте методи .map(), .filter(), .reduce() замість звичайних циклів for.
Опис: Методи map, filter і reduce роблять код лаконічнішим, підвищуючи його читабельність і зменшуючи ризик помилок. Вони чудово підходять для роботи з масивами, дозволяючи уникати зайвих змін стану.
Приклад:
// Поганий приклад
const numbers = [1, 2, 3, 4];
const doubled = [];
for (let i = 0; i < numbers.length; i++) {
    doubled.push(numbers[i] * 2);
}


// Гарний приклад
const numbers = [1, 2, 3, 4];
const doubled = numbers.map(num => num * 2);


Рекомендація: Використовуйте мемоізацію для повторюваних обчислень.
Опис: Мемоізація дозволяє зберігати результати повторюваних обчислень у кеші, підвищуючи продуктивність програми. Це особливо корисно для функцій із великими обчислювальними витратами.
Приклад:
// Поганий приклад
function factorial(n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}


// Гарний приклад
const memoizedFactorial = (() => {
    const cache = {};
    return function factorial(n) {
        if (n in cache) return cache[n];
        if (n <= 1) return 1;
        cache[n] = n * factorial(n - 1);
        return cache[n];
    };
})();


Рекомендація: Додавайте коментарі лише до складних частин коду.
Опис: Коментарі повинні пояснювати причину виконання коду ("чому"), а не те, що робить кожен рядок ("що"). Це знижує надлишковість і покращує розуміння складної логіки.
Приклад:
// Поганий приклад
let x = 10; // Змінна для значення 10


// Гарний приклад
// Лічильник спроб підключення до сервера
let connectionAttempts = 10;


Рекомендація: Покривайте код автоматичними тестами.
Опис: Тестування дозволяє виявляти помилки ще до релізу програми. Автоматичні тести забезпечують стабільність і передбачуваність поведінки коду, особливо при внесенні змін.
Приклад:
// Гарний приклад 
function sum(a, b) {
    return a + b;
}


// Тест для функції sum
console.assert(sum(2, 3) === 5, 'Test failed: sum(2, 3) should be 5');


Рекомендація: Дотримуйтесь принципу "Одна функція — одна дія".
Опис: Функція повинна виконувати лише одну конкретну дію. Це дозволяє зробити функцію більш зрозумілою, простою для тестування та повторного використання. Велика кількість завдань у межах однієї функції може ускладнити її підтримку та збільшити ризик помилок. Дотримання цього принципу допомагає створювати логічно розділений код, що полегшує його масштабування та налагодження.
Приклад:
// Поганий приклад
function processOrder(order) {
    if (!order) return;
    if (!order.items.length) return;
    sendEmail(order);
    console.log('Order processed');
}


// Гарний приклад
function validateOrder(order) {
    if (!order) throw new Error('Order is missing');
    if (!order.items.length) throw new Error('Order has no items');
}


function sendOrderConfirmation(order) {
    console.log('Order confirmation sent');
}


function processOrder(order) {
    validateOrder(order);
    sendOrderConfirmation(order);
}


Рекомендація: Використовуйте чисті функції, які не змінюють зовнішні змінні.
Опис: Чисті функції завжди повертають однаковий результат для однакових вхідних даних, не змінюють зовнішніх змінних і не залежать від зовнішнього стану. Це робить їх передбачуваними, полегшує тестування та налагодження. Чисті функції сприяють створенню стабільного і масштабованого коду.
Приклад:
// Поганий приклад
let total = 0;
function addToTotal(amount) {
    total += amount;
    return total;
}


// Гарний приклад
function calculateTotal(baseTotal, amount) {
    return baseTotal + amount;
}


Рекомендація: Уникайте побічних ефектів у функціях.
Опис: Функції з побічними ефектами змінюють стан програми поза своїм контекстом, що ускладнює прогнозування їхньої роботи. Уникаючи побічних ефектів, ви підвищуєте прозорість коду та зменшуєте ризик несподіваних поведінок. Використовуйте техніки, як-от створення копій об'єктів, для збереження початкових даних.
Приклад:
// Поганий приклад
function addItemToList(item, list) {
    list.push(item);
}


// Гарний приклад
function addItemToList(item, list) {
    return [...list, item];
}


________________


ВИСНОВКИ


У процесі роботи було розглянуто та проаналізовано основні принципи і правила оформлення коду на мові програмування JavaScript. Дотримання цих правил є ключовим фактором для забезпечення високої якості програмного забезпечення. Особлива увага приділяється читабельності, підтримуваності та структурованості коду, що в сучасній розробці є основними критеріями для ефективної роботи з додатками.
Чистий і зрозумілий код сприяє тому, щоб його легко читали, розуміли та підтримували навіть ті розробники, які вперше стикаються з ним. Використання осмислених імен змінних, функцій та класів зменшує кількість можливих помилок і скорочує час, потрібний для розуміння логіки програми. Принцип "Одна функція — одна дія" дозволяє створювати код, де кожна функція чітко виконує одне завдання, що значно спрощує його тестування та повторне використання.
Важливим аспектом є дотримання єдиного стилю оформлення, зокрема, використання однакових відступів, CamelCase для змінних і PascalCase для класів, а також фігурних дужок навіть для однорядкових операторів. Це робить код більш організованим і зручним для командної роботи, де всі учасники слідують однаковим стандартам.
Застосування сучасного синтаксису JavaScript (ES6+), такого як стрілочні функції, деструктуризація, методи роботи з масивами (map, filter, reduce), дозволяє скорочувати код і робити його більш ефективним. Уникнення дублювання коду за допомогою принципу DRY (Don't Repeat Yourself) та використання незмінних об'єктів (immutable objects) підвищує стабільність і продуктивність додатків.
Робота з помилками також є важливим компонентом якісного коду. Використання try...catch для обробки винятків та глобальних обробників помилок допомагає запобігти збоям і забезпечує стабільну роботу програми. Видалення "мертвого коду" знижує ризик плутанини і робить програму більш чистою та ефективною.
Загалом, дотримання правил оформлення коду сприяє створенню надійного, масштабованого та легко підтримуваного програмного забезпечення. Такі підходи забезпечують ефективну роботу як окремих розробників, так і команд, дозволяючи максимально використовувати потенціал JavaScript у сучасних проєктах.
________________


ДОДАТОК А
Список використаних джерел


1.  Фаулер, М. Рефакторинг. Поліпшення існуючого коду: 2-е видання. Пер. з англ. — Бостон: Addison-Wesley Professional, 2018. — 448 с. — Дата звернення: 13 грудня 2024 р.
2. Airbnb. Airbnb JavaScript Style Guide [Електронний ресурс]. — Режим доступу: https://github.com/airbnb/javascript. — Дата звернення: 13 грудня 2024 р.
________________
ДОДАТОК Б
Відео-захист на YouTube


https://youtu.be/u9PxgaiKFac




________________


ДОДАТОК В
Презентація


 Изображение выглядит как текст, снимок экрана, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, дизайн

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, дизайн

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 



 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 



 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 



 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 



 Изображение выглядит как текст, снимок экрана, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, программное обеспечение

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, программное обеспечение, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, дизайн

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт, дизайн

Автоматически созданное описание 

 Изображение выглядит как текст, снимок экрана, Шрифт

Автоматически созданное описание